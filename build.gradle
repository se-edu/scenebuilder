import org.apache.tools.ant.filters.EscapeUnicode

buildscript {
  repositories { jcenter() }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
  }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

def tryGetProperty = {String name, String defaultValue ->
    if (!project.hasProperty(name)) {
        return defaultValue
    }

    return project.property(name)?.toString()
}

repositories {
    mavenLocal()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/releases/"
    }

    jcenter()
    mavenCentral()
}

dependencies {
    // maven dependencies
    compile 'org.eclipse.aether:aether-api:1.1.0'
    compile 'org.eclipse.aether:aether-impl:1.1.0'
    compile 'org.eclipse.aether:aether-connector-basic:1.1.0'
    compile 'org.eclipse.aether:aether-transport-file:1.1.0'
    compile 'org.eclipse.aether:aether-transport-http:1.1.0'
    compile 'org.apache.maven:maven-aether-provider:3.3.9'

    compile 'com.gluonhq:charm-glisten:3.0.1-SNAPSHOT'

    // REST API
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile 'javax.json:javax.json-api:1.0'
    runtime 'org.glassfish:javax.json:1.0.4'
    
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.2.0'
}

group = 'com.gluonhq.scenebuilder'
version = tryGetProperty('VERSION', '8.2.0-SNAPSHOT')
mainClassName = 'com.oracle.javafx.scenebuilder.app.SceneBuilderApp'
ext.buildDateFormat = version.endsWith('-SNAPSHOT') ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'

clean {
    delete "dist"
}

processResources {
    def buildDate = new Date().format(buildDateFormat)
    from ('src/main/resources') {
        include '**/*.properties'
        expand([
            version: version,
            javaVersion: System.getProperty('java.runtime.version') + ', ' + System.getProperty('java.vendor'),
            buildDate: buildDate,
            mainClassName: mainClassName
        ])
        filter(EscapeUnicode)
    }
    into buildDir
}

jar {
    baseName = 'scenebuilder'
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

shadowJar {
    baseName = 'scenebuilder-all'
}

task kitJar(type: Jar, dependsOn: classes, description: 'Creates a jar for the SceneBuilder kit.') {
    baseName = 'scenebuilder-kit'
    from (sourceSets.main.output) {
        include "com/oracle/javafx/scenebuilder/kit/**/*"
    }
}

apply from: 'maven-publish.gradle'

if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
